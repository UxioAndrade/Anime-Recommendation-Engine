/*
 * This file is generated by jOOQ.
 */
package generated.enums


import generated.Public

import java.lang.IllegalArgumentException
import java.lang.String

import javax.annotation.Generated

import org.jooq.Catalog
import org.jooq.EnumType
import org.jooq.Schema

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.0"
  ),
  comments = "This class is generated by jOOQ"
)
object Gender {

  val Male : Gender = generated.enums.Male
  val Female : Gender = generated.enums.Female
  val Other : Gender = generated.enums.Other

  def values : Array[Gender] = Array(
      Male
    , Female
    , Other
  )

  def valueOf(s : String) : Gender = s match {
    case "Male" => Male
    case "Female" => Female
    case "Other" => Other
    case _ => throw new IllegalArgumentException()
  }
}

sealed trait Gender extends EnumType {
  override def getCatalog : Catalog = if (getSchema == null) null else getSchema().getCatalog()
  override def getSchema : Schema = Public.PUBLIC
  override def getName : String = "gender"
}

case object Male extends Gender {
  override def getLiteral : String = "Male"
}

case object Female extends Gender {
  override def getLiteral : String = "Female"
}

case object Other extends Gender {
  override def getLiteral : String = "Other"
}
