/*
 * This file is generated by jOOQ.
 */
package generated.enums


import generated.Public

import java.lang.IllegalArgumentException
import java.lang.String

import javax.annotation.Generated

import org.jooq.Catalog
import org.jooq.EnumType
import org.jooq.Schema

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.0"
  ),
  comments = "This class is generated by jOOQ"
)
object Animetype {

  val Movie : Animetype = generated.enums.Movie
  val Special : Animetype = generated.enums.Special
  val TV : Animetype = generated.enums.TV
  val Music : Animetype = generated.enums.Music
  val ONA : Animetype = generated.enums.ONA
  val OVA : Animetype = generated.enums.OVA
  val UnknownType : Animetype = generated.enums.UnknownType

  def values : Array[Animetype] = Array(
      Movie
    , Special
    , TV
    , Music
    , ONA
    , OVA
    , UnknownType
  )

  def valueOf(s : String) : Animetype = s match {
    case "Movie" => Movie
    case "Special" => Special
    case "TV" => TV
    case "Music" => Music
    case "ONA" => ONA
    case "OVA" => OVA
    case "UnknownType" => UnknownType
    case _ => throw new IllegalArgumentException()
  }
}

sealed trait Animetype extends EnumType {
  override def getCatalog : Catalog = if (getSchema == null) null else getSchema().getCatalog()
  override def getSchema : Schema = Public.PUBLIC
  override def getName : String = "animetype"
}

case object Movie extends Animetype {
  override def getLiteral : String = "Movie"
}

case object Special extends Animetype {
  override def getLiteral : String = "Special"
}

case object TV extends Animetype {
  override def getLiteral : String = "TV"
}

case object Music extends Animetype {
  override def getLiteral : String = "Music"
}

case object ONA extends Animetype {
  override def getLiteral : String = "ONA"
}

case object OVA extends Animetype {
  override def getLiteral : String = "OVA"
}

case object UnknownType extends Animetype {
  override def getLiteral : String = "UnknownType"
}
