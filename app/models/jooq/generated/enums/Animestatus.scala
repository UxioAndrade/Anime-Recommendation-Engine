/*
 * This file is generated by jOOQ.
 */
package generated.enums


import generated.Public

import java.lang.IllegalArgumentException
import java.lang.String

import javax.annotation.Generated

import org.jooq.Catalog
import org.jooq.EnumType
import org.jooq.Schema

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.0"
  ),
  comments = "This class is generated by jOOQ"
)
object Animestatus {

  val Finished_Airing : Animestatus = generated.enums.Finished_Airing
  val Currently_Airing : Animestatus = generated.enums.Currently_Airing
  val Not_yet_aired : Animestatus = generated.enums.Not_yet_aired
  val UnknownStatus : Animestatus = generated.enums.UnknownStatus

  def values : Array[Animestatus] = Array(
      Finished_Airing
    , Currently_Airing
    , Not_yet_aired
    , UnknownStatus
  )

  def valueOf(s : String) : Animestatus = s match {
    case "Finished Airing" => Finished_Airing
    case "Currently Airing" => Currently_Airing
    case "Not yet aired" => Not_yet_aired
    case "UnknownStatus" => UnknownStatus
    case _ => throw new IllegalArgumentException()
  }
}

sealed trait Animestatus extends EnumType {
  override def getCatalog : Catalog = if (getSchema == null) null else getSchema().getCatalog()
  override def getSchema : Schema = Public.PUBLIC
  override def getName : String = "animestatus"
}

case object Finished_Airing extends Animestatus {
  override def getLiteral : String = "Finished Airing"
}

case object Currently_Airing extends Animestatus {
  override def getLiteral : String = "Currently Airing"
}

case object Not_yet_aired extends Animestatus {
  override def getLiteral : String = "Not yet aired"
}

case object UnknownStatus extends Animestatus {
  override def getLiteral : String = "UnknownStatus"
}
