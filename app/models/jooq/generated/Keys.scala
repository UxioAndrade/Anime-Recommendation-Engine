/*
 * This file is generated by jOOQ.
 */
package generated


import generated.tables.Anime
import generated.tables.Animeuser
import generated.tables.Viewer
import generated.tables.records.AnimeRecord
import generated.tables.records.AnimeuserRecord
import generated.tables.records.ViewerRecord

import javax.annotation.Generated

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.Internal

import scala.Array


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.0"
  ),
  comments = "This class is generated by jOOQ"
)
object Keys {

  // -------------------------------------------------------------------------
  // IDENTITY definitions
  // -------------------------------------------------------------------------


  // -------------------------------------------------------------------------
  // UNIQUE and PRIMARY KEY definitions
  // -------------------------------------------------------------------------

  val ANIME_PKEY = UniqueKeys0.ANIME_PKEY
  val ANIMEUSER_PKEY = UniqueKeys0.ANIMEUSER_PKEY
  val VIEWER_PKEY = UniqueKeys0.VIEWER_PKEY

  // -------------------------------------------------------------------------
  // FOREIGN KEY definitions
  // -------------------------------------------------------------------------

  val ANIMEUSER__ANIMEUSER_USERNAME_FKEY = ForeignKeys0.ANIMEUSER__ANIMEUSER_USERNAME_FKEY
  val ANIMEUSER__ANIMEUSER_ANIME_FKEY = ForeignKeys0.ANIMEUSER__ANIMEUSER_ANIME_FKEY
  val VIEWER__VIEWER_USERWATCHING_FKEY = ForeignKeys0.VIEWER__VIEWER_USERWATCHING_FKEY
  val VIEWER__VIEWER_USERCOMPLETED_FKEY = ForeignKeys0.VIEWER__VIEWER_USERCOMPLETED_FKEY
  val VIEWER__VIEWER_USERONHOLD_FKEY = ForeignKeys0.VIEWER__VIEWER_USERONHOLD_FKEY
  val VIEWER__VIEWER_USERDROPPED_FKEY = ForeignKeys0.VIEWER__VIEWER_USERDROPPED_FKEY
  val VIEWER__VIEWER_USERPLANTOWATCH_FKEY = ForeignKeys0.VIEWER__VIEWER_USERPLANTOWATCH_FKEY

  // -------------------------------------------------------------------------
  // [#1459] distribute members to avoid static initialisers > 64kb
  // -------------------------------------------------------------------------

  private object UniqueKeys0 {
    val ANIME_PKEY : UniqueKey[AnimeRecord] = Internal.createUniqueKey(Anime.ANIME, "anime_pkey", Anime.ANIME.ID)
    val ANIMEUSER_PKEY : UniqueKey[AnimeuserRecord] = Internal.createUniqueKey(Animeuser.ANIMEUSER, "animeuser_pkey", Animeuser.ANIMEUSER.USERNAME, Animeuser.ANIMEUSER.ANIME)
    val VIEWER_PKEY : UniqueKey[ViewerRecord] = Internal.createUniqueKey(Viewer.VIEWER, "viewer_pkey", Viewer.VIEWER.USERNAME)
  }

  private object ForeignKeys0 {
    val ANIMEUSER__ANIMEUSER_USERNAME_FKEY : ForeignKey[AnimeuserRecord, ViewerRecord] = Internal.createForeignKey(generated.Keys.VIEWER_PKEY, Animeuser.ANIMEUSER, "animeuser__animeuser_username_fkey", Animeuser.ANIMEUSER.USERNAME)
    val ANIMEUSER__ANIMEUSER_ANIME_FKEY : ForeignKey[AnimeuserRecord, AnimeRecord] = Internal.createForeignKey(generated.Keys.ANIME_PKEY, Animeuser.ANIMEUSER, "animeuser__animeuser_anime_fkey", Animeuser.ANIMEUSER.ANIME)
    val VIEWER__VIEWER_USERWATCHING_FKEY : ForeignKey[ViewerRecord, AnimeRecord] = Internal.createForeignKey(generated.Keys.ANIME_PKEY, Viewer.VIEWER, "viewer__viewer_userwatching_fkey", Viewer.VIEWER.USERWATCHING)
    val VIEWER__VIEWER_USERCOMPLETED_FKEY : ForeignKey[ViewerRecord, AnimeRecord] = Internal.createForeignKey(generated.Keys.ANIME_PKEY, Viewer.VIEWER, "viewer__viewer_usercompleted_fkey", Viewer.VIEWER.USERCOMPLETED)
    val VIEWER__VIEWER_USERONHOLD_FKEY : ForeignKey[ViewerRecord, AnimeRecord] = Internal.createForeignKey(generated.Keys.ANIME_PKEY, Viewer.VIEWER, "viewer__viewer_useronhold_fkey", Viewer.VIEWER.USERONHOLD)
    val VIEWER__VIEWER_USERDROPPED_FKEY : ForeignKey[ViewerRecord, AnimeRecord] = Internal.createForeignKey(generated.Keys.ANIME_PKEY, Viewer.VIEWER, "viewer__viewer_userdropped_fkey", Viewer.VIEWER.USERDROPPED)
    val VIEWER__VIEWER_USERPLANTOWATCH_FKEY : ForeignKey[ViewerRecord, AnimeRecord] = Internal.createForeignKey(generated.Keys.ANIME_PKEY, Viewer.VIEWER, "viewer__viewer_userplantowatch_fkey", Viewer.VIEWER.USERPLANTOWATCH)
  }
}
