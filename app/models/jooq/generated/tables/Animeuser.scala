/*
 * This file is generated by jOOQ.
 */
package generated.tables


import generated.Indexes
import generated.Keys
import generated.Public
import generated.tables.records.AnimeuserRecord

import java.lang.Class
import java.lang.Float
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import scala.Array


object Animeuser {

  /**
   * The reference instance of <code>public.animeuser</code>
   */
  val ANIMEUSER = new Animeuser
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.0"
  ),
  comments = "This class is generated by jOOQ"
)
class Animeuser(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, AnimeuserRecord],
  aliased : Table[AnimeuserRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[AnimeuserRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[AnimeuserRecord] = {
    classOf[AnimeuserRecord]
  }

  /**
   * The column <code>public.animeuser.username</code>.
   */
  val USERNAME : TableField[AnimeuserRecord, String] = createField("username", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), "")

  /**
   * The column <code>public.animeuser.anime</code>.
   */
  val ANIME : TableField[AnimeuserRecord, Long] = createField("anime", org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.animeuser.watchedepisodes</code>.
   */
  val WATCHEDEPISODES : TableField[AnimeuserRecord, Integer] = createField("watchedepisodes", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>public.animeuser.score</code>.
   */
  val SCORE : TableField[AnimeuserRecord, Float] = createField("score", org.jooq.impl.SQLDataType.REAL.nullable(false), "")

  /**
   * Create a <code>public.animeuser</code> table reference
   */
  def this() = {
    this(DSL.name("animeuser"), null, null, null, null)
  }

  /**
   * Create an aliased <code>public.animeuser</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, generated.tables.Animeuser.ANIMEUSER, null)
  }

  /**
   * Create an aliased <code>public.animeuser</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, generated.tables.Animeuser.ANIMEUSER, null)
  }

  private def this(alias : Name, aliased : Table[AnimeuserRecord]) = {
    this(alias, null, null, aliased, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.ANIMEUSER_PKEY)
  }

  override def getPrimaryKey : UniqueKey[AnimeuserRecord] = {
    Keys.ANIMEUSER_PKEY
  }

  override def getKeys : List[ UniqueKey[AnimeuserRecord] ] = {
    return Arrays.asList[ UniqueKey[AnimeuserRecord] ](Keys.ANIMEUSER_PKEY)
  }

  override def getReferences : List[ ForeignKey[AnimeuserRecord, _] ] = {
    return Arrays.asList[ ForeignKey[AnimeuserRecord, _] ](Keys.ANIMEUSER__ANIMEUSER_USERNAME_FKEY, Keys.ANIMEUSER__ANIMEUSER_ANIME_FKEY)
  }

  def viewer : Viewer = {
    return new Viewer(this, Keys.ANIMEUSER__ANIMEUSER_USERNAME_FKEY)
  }

  def anime : Anime = {
    return new Anime(this, Keys.ANIMEUSER__ANIMEUSER_ANIME_FKEY)
  }

  override def as(alias : String) : Animeuser = {
    new Animeuser(DSL.name(alias), this)
  }

  override def as(alias : Name) : Animeuser = {
    new Animeuser(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Animeuser = {
    new Animeuser(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Animeuser = {
    new Animeuser(name, null)
  }
}
