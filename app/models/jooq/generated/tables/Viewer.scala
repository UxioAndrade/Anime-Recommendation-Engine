/*
 * This file is generated by jOOQ.
 */
package generated.tables


import generated.Indexes
import generated.Keys
import generated.Public
import generated.enums.Gender
import generated.tables.records.ViewerRecord

import java.lang.Class
import java.lang.Float
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Viewer {

  /**
   * The reference instance of <code>public.viewer</code>
   */
  val VIEWER = new Viewer
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.11.0"
  ),
  comments = "This class is generated by jOOQ"
)
class Viewer(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, ViewerRecord],
  aliased : Table[ViewerRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[ViewerRecord](
  alias,
  Public.PUBLIC,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[ViewerRecord] = {
    classOf[ViewerRecord]
  }

  /**
   * The column <code>public.viewer.id</code>.
   */
  val ID : TableField[ViewerRecord, Long] = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.viewer.username</code>.
   */
  val USERNAME : TableField[ViewerRecord, String] = createField("username", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), "")

  /**
   * The column <code>public.viewer.userwatching</code>.
   */
  val USERWATCHING : TableField[ViewerRecord, Integer] = createField("userwatching", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>public.viewer.usercompleted</code>.
   */
  val USERCOMPLETED : TableField[ViewerRecord, Integer] = createField("usercompleted", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>public.viewer.useronhold</code>.
   */
  val USERONHOLD : TableField[ViewerRecord, Integer] = createField("useronhold", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>public.viewer.userdropped</code>.
   */
  val USERDROPPED : TableField[ViewerRecord, Integer] = createField("userdropped", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>public.viewer.userplantowatch</code>.
   */
  val USERPLANTOWATCH : TableField[ViewerRecord, Integer] = createField("userplantowatch", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), "")

  /**
   * The column <code>public.viewer.userdaysspentwatching</code>.
   */
  val USERDAYSSPENTWATCHING : TableField[ViewerRecord, Float] = createField("userdaysspentwatching", org.jooq.impl.SQLDataType.REAL, "")

  /**
   * The column <code>public.viewer.gender</code>.
   */
  val GENDER : TableField[ViewerRecord, Gender] = createField("gender", org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(classOf[generated.enums.Gender]), "")

  /**
   * The column <code>public.viewer.location</code>.
   */
  val LOCATION : TableField[ViewerRecord, String] = createField("location", org.jooq.impl.SQLDataType.VARCHAR(50), "")

  /**
   * The column <code>public.viewer.statsepisodes</code>.
   */
  val STATSEPISODES : TableField[ViewerRecord, Long] = createField("statsepisodes", org.jooq.impl.SQLDataType.BIGINT, "")

  /**
   * Create a <code>public.viewer</code> table reference
   */
  def this() = {
    this(DSL.name("viewer"), null, null, null, null)
  }

  /**
   * Create an aliased <code>public.viewer</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, generated.tables.Viewer.VIEWER, null)
  }

  /**
   * Create an aliased <code>public.viewer</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, generated.tables.Viewer.VIEWER, null)
  }

  private def this(alias : Name, aliased : Table[ViewerRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, ViewerRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, generated.tables.Viewer.VIEWER, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.VIEWER_PKEY)
  }

  override def getPrimaryKey : UniqueKey[ViewerRecord] = {
    Keys.VIEWER_PKEY
  }

  override def getKeys : List[ UniqueKey[ViewerRecord] ] = {
    return Arrays.asList[ UniqueKey[ViewerRecord] ](Keys.VIEWER_PKEY)
  }

  override def getReferences : List[ ForeignKey[ViewerRecord, _] ] = {
    return Arrays.asList[ ForeignKey[ViewerRecord, _] ](Keys.VIEWER__VIEWER_USERWATCHING_FKEY, Keys.VIEWER__VIEWER_USERCOMPLETED_FKEY, Keys.VIEWER__VIEWER_USERONHOLD_FKEY, Keys.VIEWER__VIEWER_USERDROPPED_FKEY, Keys.VIEWER__VIEWER_USERPLANTOWATCH_FKEY)
  }

  def viewer_ViewerUserwatchingFkey : Anime = {
    return new Anime(this, Keys.VIEWER__VIEWER_USERWATCHING_FKEY)
  }

  def viewer_ViewerUsercompletedFkey : Anime = {
    return new Anime(this, Keys.VIEWER__VIEWER_USERCOMPLETED_FKEY)
  }

  def viewer_ViewerUseronholdFkey : Anime = {
    return new Anime(this, Keys.VIEWER__VIEWER_USERONHOLD_FKEY)
  }

  def viewer_ViewerUserdroppedFkey : Anime = {
    return new Anime(this, Keys.VIEWER__VIEWER_USERDROPPED_FKEY)
  }

  def viewer_ViewerUserplantowatchFkey : Anime = {
    return new Anime(this, Keys.VIEWER__VIEWER_USERPLANTOWATCH_FKEY)
  }

  override def as(alias : String) : Viewer = {
    new Viewer(DSL.name(alias), this)
  }

  override def as(alias : Name) : Viewer = {
    new Viewer(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Viewer = {
    new Viewer(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Viewer = {
    new Viewer(name, null)
  }
}
